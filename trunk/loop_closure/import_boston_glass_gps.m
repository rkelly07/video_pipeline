%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/mikhail/Documents/MIT/vision/SOURCE_DATA/boston_gps_merged_gaps.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2014/09/10 13:31:46

%% Initialize variables.
filename = '2014-10-26_14-36-45.csv';
delimiter = ',';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
  raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,5]
  % Converts strings in the input cell array to numbers. Replaced non-numeric
  % strings with NaN.
  rawData = dataArray{col};
  for row=1:size(rawData, 1);
    % Create a regular expression to detect and remove non-numeric prefixes and
    % suffixes.
    regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
    try
      result = regexp(rawData{row}, regexstr, 'names');
      numbers = result.numbers;
      
      % Detected commas in non-thousand locations.
      invalidThousandsSeparator = false;
      if any(numbers==',');
        thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
        if isempty(regexp(thousandsRegExp, ',', 'once'));
          numbers = NaN;
          invalidThousandsSeparator = true;
        end
      end
      % Convert numeric strings to numbers.
      if ~invalidThousandsSeparator;
        numbers = textscan(strrep(numbers, ',', ''), '%f');
        numericData(row, col) = numbers{1};
        raw{row, col} = numbers{1};
      end
    catch me
    end
  end
end

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [2,3,4,5]);
rawCellColumns = raw(:, 1);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
time = rawCellColumns(:, 1);
timestamp = cell2mat(rawNumericColumns(:, 1));
recordtime = cell2mat(rawNumericColumns(:, 2));
lat = cell2mat(rawNumericColumns(:, 3));
long = cell2mat(rawNumericColumns(:, 4));

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers; 
clearvars invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;


%%
gps = [datenum(time(2:end,:)) long(2:end) lat(2:end)];
start_idx = find(long<-71.065,1,'first')+1;
gps = gps(start_idx:end,:);

% sep(1) = find(str2num(datestr(gps(:,1),'HHMM'))>=1410,1);
% sep(2) = find(str2num(datestr(gps(:,1),'HHMM'))>=1450,1);
% sep(3) = find(str2num(datestr(gps(:,1),'HHMM'))>=1620,1);
% sep(4) = find(str2num(datestr(gps(:,1),'HHMM'))>=1655,1);
% xyy{1} = gps(1:sep(1),:);
% xyy{2} = gps(sep(1)+1:sep(2),:);
% xyy{3} = gps(sep(2)+1:sep(3),:);
% xyy{4} = gps(sep(3)+1:sep(4),:);
% xyy{5} = gps(sep(4)+1:end,:);

%%
figure(21), clf, hold on
% plot(gps(:,1),(gps(:,2)-max(gps(:,2)))./min(gps(:,2)),'xb')
% plot(gps(:,1),(gps(:,3)-max(gps(:,3)))./min(gps(:,3)),'xg')
% datetick('x','HHMM')

plot(inf,inf,'g-')
[ax,h1,h2] = plotyy(gps(:,1),gps(:,2),gps(:,1),gps(:,3));
hold on

xlims = [datenum('26-Oct-2014 14:30:00') datenum('26-Oct-2014 18:10:00')];

set(ax(1),'xlim',xlims)
set(ax(2),'xlim',xlims)
datetick(ax(1),'x','HHMM','KeepLimits')
datetick(ax(2),'x','HHMM','KeepLimits')

tour_sep = datenum('10/26/2014 16:45:00');
video_start_time = datenum('10/26/2014 14:36:45');
video_end_time = datenum('10/26/2014 17:58:47');

line([tour_sep tour_sep],[-9999 9999],'color','r','LineWidth',2,'LineStyle','--')
line([video_start_time video_start_time],[-9999 9999],'color','k','LineWidth',3)
line([video_end_time video_end_time],[-9999 9999],'color','k','LineWidth',3)

set(ax(1),'ycolor','k')
set(ax(2),'ycolor','k')
set(h1,'color','b')
set(h2,'color','g')

legend({'Lat','Long','Tour 1/Tour 2','Video Start/End'},'Location','NW','FontSize',20)
axis([7.358986041666666e+05 7.358987569444445e+05 -7.111000000000000e+01 -7.104000000000001e+01])

% set(ax(2),'xtick',[])
% set(h1,'LineStyle','x')
% set(h2,'LineStyle','x')
% xlims = get(gca,'xlim');
% ylims = get(gca,'ylim');
% line([gps(sep(1),1) gps(sep(1),1)],[-9999 9999],'color','k','linewidth',3)
% line([gps(sep(2),1) gps(sep(2),1)],[-9999 9999],'color','k','linewidth',3)
% line([gps(sep(3),1) gps(sep(3),1)],[-9999 9999],'color','k','linewidth',3)
% line([gps(sep(4),1) gps(sep(4),1)],[-9999 9999],'color','k','linewidth',3)
% hold(ax(1), 'on')
% plot(ax(1),gps(:,1),(gps(:,2)),'-','color','blue')
% hold(ax(2), 'on')
% plot(ax(2),gps(:,1),(gps(:,3)),'-','color',[0 0.5 0])

% axis([xlims ylims])

% figure(22), clf, hold on
% cmap(1,:) = [1 0 0];
% cmap(2,:) = [0 0.5 0];
% cmap(3,:) = [1 0 0];
% cmap(4,:) = [0 0 1];
% cmap(5,:) = [1 0 0];
% plot(xyy{1}(:,2),xyy{1}(:,3),'x','color',cmap(1,:))
% plot(xyy{2}(:,2),xyy{2}(:,3),'x','color',cmap(2,:))
% plot(xyy{3}(:,2),xyy{3}(:,3),'x','color',cmap(3,:))
% plot(xyy{4}(:,2),xyy{4}(:,3),'x','color',cmap(4,:))
% plot(xyy{5}(:,2),xyy{5}(:,3),'x','color',cmap(5,:))
% legend(strrep(num2str(1:5),' ','')')

%%
figure(22), clf, hold on
tour_sep_idx = find(gps(:,1)>tour_sep,1,'first');
plot(gps(1:tour_sep_idx,2),gps(1:tour_sep_idx,3),'b-','LineWidth',2)
plot(gps(tour_sep_idx+1:end,2),gps(tour_sep_idx+1:end,3),'g-','LineWidth',2)
legend({'Tour 1','Tour 2'},'Location','N','FontSize',20)

%% ground truth

% u = datenum(min(gps(:,1)));
% v = datenum(max(gps(:,1)));
% c11 = min(gps(:,1));
% c12 = datenum('25-Aug-2014 14:50:00');
% c21 = datenum('25-Aug-2014 16:20:00');
% c22 = datenum('25-Aug-2014 16:55:00');
% 
% r11 = (c11-u)/(v-u);
% r12 = (c12-u)/(v-u);
% r21 = (c21-u)/(v-u);
% r22 = (c22-u)/(v-u);
% d = mean([r21-r11 r22-r12]);
% 
% scaling = 100;
% num_frames = 75486;
% scaled_size = ceil(num_frames/scaling);
% 
% s11 = r11*scaled_size;
% s12 = r12*scaled_size;
% s21 = r21*scaled_size;
% s22 = r22*scaled_size;
% ds = d*scaled_size;
% 
% loop_tol = 5;
% 
% truth = ones(scaled_size)*0;
% for j = 1:scaled_size
%     for i = 1:scaled_size
%         if j>=s11 && j<=s12 && i>=s21 && i<=s22
%             if abs(abs(i-j)-ds) < loop_tol
%                 truth(i,j) = 1;
%             end
%         end
%     end
% end
% 
% figure(499)
% imshow(flipud(truth))
% axis on
% set(gca,'xticklabel',num2str(round(str2num(get(gca,'xticklabel')).*scaling)))
% set(gca,'yticklabel',num2str(round(flipud(str2num(get(gca,'yticklabel'))).*scaling)))
% 
% save('data/boston_ground_truth','truth','scaling')

